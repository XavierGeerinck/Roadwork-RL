syntax = "proto3";

package roadwork.simulator;

import "system/base_response.proto";
import "system/base_request.proto";
import "services/simulator/request.proto";
import "services/simulator/response.proto";

service Simulator {
    rpc Create(CreateRequest) returns (CreateResponse) {}

    // Run one timestep of the environment's dynamics. When end of
    // episode is reached, you are responsible for calling `reset()`
    // to reset this environment's state.
    rpc Step(StepRequest) returns (StepResponse) {}

    // Resets the state of the environment and returns an initial observation.
    rpc Reset(ResetRequest) returns (ResetResponse) {}

    // Renders the environment.
    // The set of supported modes varies per environment. (And some
    // environments do not support rendering at all.) By convention,
    // if mode is:
    // - human: render to the current display or terminal and
    //     return nothing. Usually for human consumption.
    // - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
    //     representing RGB values for an x-by-y pixel image, suitable
    //     for turning into a video.
    // - ansi: Return a string (str) or StringIO.StringIO containing a
    //     terminal-style text representation. The text can include newlines
    //     and ANSI escape sequences (e.g. for colors).
    // Note:
    //     Make sure that your class's metadata 'render.modes' key includes
    //         the list of supported modes. It's recommended to call super()
    //         in implementations to use the functionality of this method.
    // Args:
    //     mode (str): the mode to render with
    // Example:
    // class MyEnv(Env):
    //     metadata = {'render.modes': ['human', 'rgb_array']}
    //     def render(self, mode='human'):
    //         if mode == 'rgb_array':
    //             return np.array(...) # return RGB frame suitable for video
    //         elif mode == 'human':
    //             ... # pop up a window and render
    //         else:
    //             super(MyEnv, self).render(mode=mode) # just raise an exception
    rpc Render(RenderRequest) returns (RenderResponse) {}

    // Override close in your subclass to perform any necessary cleanup.
    // Environments will automatically close() themselves when
    // garbage collected or when the program exits.
    rpc Close(CloseRequest) returns (CloseResponse) {}

    rpc ActionSpaceSample(ActionSpaceSampleRequest) returns (ActionSpaceSampleResponse) {}
    rpc ActionSpaceInfo(ActionSpaceInfoRequest) returns (ActionSpaceInfoResponse) {}
    rpc ObservationSpaceInfo(ObservationSpaceInfoRequest) returns (ObservationSpaceInfoResponse) {}

    rpc MonitorStart(roadwork.system.BaseRequest) returns (roadwork.system.BaseResponse) {}
    rpc MonitorStop(roadwork.system.BaseRequest) returns (roadwork.system.BaseResponse) {}
}