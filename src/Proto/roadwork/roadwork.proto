syntax = "proto3";

package roadwork;

service Roadwork {
    rpc Create(CreateRequest) returns (CreateResponse) {}

    // Run one timestep of the environment's dynamics. When end of
    // episode is reached, you are responsible for calling `reset()`
    // to reset this environment's state.
    rpc Step(StepRequest) returns (StepResponse) {}

    // Resets the state of the environment and returns an initial observation.
    rpc Reset(ResetRequest) returns (ResetResponse) {}

    // Renders the environment.
    // The set of supported modes varies per environment. (And some
    // environments do not support rendering at all.) By convention,
    // if mode is:
    // - human: render to the current display or terminal and
    //     return nothing. Usually for human consumption.
    // - rgb_array: Return an numpy.ndarray with shape (x, y, 3),
    //     representing RGB values for an x-by-y pixel image, suitable
    //     for turning into a video.
    // - ansi: Return a string (str) or StringIO.StringIO containing a
    //     terminal-style text representation. The text can include newlines
    //     and ANSI escape sequences (e.g. for colors).
    // Note:
    //     Make sure that your class's metadata 'render.modes' key includes
    //         the list of supported modes. It's recommended to call super()
    //         in implementations to use the functionality of this method.
    // Args:
    //     mode (str): the mode to render with
    // Example:
    // class MyEnv(Env):
    //     metadata = {'render.modes': ['human', 'rgb_array']}
    //     def render(self, mode='human'):
    //         if mode == 'rgb_array':
    //             return np.array(...) # return RGB frame suitable for video
    //         elif mode == 'human':
    //             ... # pop up a window and render
    //         else:
    //             super(MyEnv, self).render(mode=mode) # just raise an exception
    rpc Render(RenderRequest) returns (RenderResponse) {}

    // Override close in your subclass to perform any necessary cleanup.
    // Environments will automatically close() themselves when
    // garbage collected or when the program exits.
    rpc Close(CloseRequest) returns (CloseResponse) {}

    rpc ActionSpaceSample(ActionSpaceSampleRequest) returns (ActionSpaceSampleResponse) {}
    rpc ActionSpaceInfo(ActionSpaceInfoRequest) returns (ActionSpaceInfoResponse) {}
    rpc ObservationSpaceInfo(ObservationSpaceInfoRequest) returns (ObservationSpaceInfoResponse) {}

    rpc MonitorStart(BaseRequest) returns (BaseResponse) {}
    rpc MonitorStop(BaseRequest) returns (BaseResponse) {}
}

// ============================================================
// REQUESTS
// ============================================================
message BaseRequest {
    string instanceId = 1;
}

message StepRequest {
    string instanceId = 1; // The instanceId of the environment
    int32 action = 2; // The action provided by the agent (@todo: the datatype doesn't exist...)
    bool render = 3; // Do we need to render? (@todo)
}

message ResetRequest {
    string instanceId = 1;
}

message RenderRequest {
    string instanceId = 1; // The instanceId of the environment
    string mode = 2;
}

message CloseRequest {
    string instanceId = 1; // The instanceId of the environment
}

message CreateRequest {
    string envId = 1;
}

message ActionSpaceSampleRequest {
    string instanceId = 1;
}

message ActionSpaceInfoRequest {
    string instanceId = 1;
}

message ObservationSpaceInfoRequest {
    string instanceId = 1;
}

// ============================================================
// RESPONSE
// ============================================================
message BaseResponse {}

message StepResponse {
    float reward = 1; // The reward received after taking the previous action
    bool isDone = 2; // Has the episode ended?
    map<string, string> info = 3; // Diagnostic information
    SpaceWrapper observation = 4;
}

message ResetResponse {
    repeated double observation = 1; // The initial observation
}

message RenderResponse {}

message CloseResponse {}

message CreateResponse {
    string instanceId = 1;
}


message ActionSpaceSampleResponse {
    int32 action = 1; // Note: Serialized as bytes!
}

message ActionSpaceInfoResponse {
    MetaSpaceWrapper result = 1;
}

message ObservationSpaceInfoResponse {
    MetaSpaceWrapper result = 1;
}

// ============================================================
// META INFORMATION OBSERVATION/ACTION SPACE
// ============================================================
// This file contains the different definitions of the spaces that 
// can utilize to serialize. Examples are: Discrete Spaces, Box Spaces, ...
message MetaSpaceBox {
    repeated uint32 dimensions = 1; // How many dimensions do we have?

    oneof dimension {
        // @todo: currently double to span multiple, can be expanded to others for more compactness
        MetaSpaceBoxDimensionDouble dimensionDouble = 2;
    }
}

message MetaSpaceBoxDimensionDouble {
    repeated double low = 1;
    repeated double high = 2;

    // Repeated is "packed" by default
    // See "packed": https://developers.google.com/protocol-buffers/docs/proto#options
    // See why it's optimal: https://developers.google.com/protocol-buffers/docs/encoding.html#packed
    repeated double observation = 3;
}

message MetaSpaceDiscrete {
    uint32 n = 1;
}

message MetaSpaceTuple {
    repeated MetaSpaceWrapper spaces = 1;
}

message MetaSpaceWrapper {
    oneof type {
        MetaSpaceBox box = 1;
        MetaSpaceDiscrete discrete = 2;
        MetaSpaceTuple tuple = 3;
    }
}

// ============================================================
// SPACE
// ============================================================
message SpaceWrapper {
    oneof type {
        SpaceBox box = 1;
        SpaceDiscrete discrete = 2;
        SpaceTuple tuple = 3;
    }
}

message SpaceDiscrete {
    int32 observation = 1;
}

message SpaceBox {
    repeated double observation = 1;
}

message SpaceTuple {
    repeated SpaceWrapper tuples = 1;
}